name: CI

on: [push, pull_request]

jobs:
  test:
    name: Python ${{ matrix.python-version }} compile test
    runs-on: ubuntu-16.04
    strategy:
      matrix:
        python-version: [ '2.7', '3.x' ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install dependencies
        run: pip install yapf
      - name: Check compiles
        run: python -m py_compile main.py

  build:
    name: ${{ matrix.config.kind }} ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - os: macOS-latest
            kind: test_release
          - os: windows-2019
            kind: test_release
          - os: ubuntu-16.04
            kind: test_release

    outputs:
      LINUX_ZIP_CHECKSUM: ${{steps.linux_pre_release.outputs.ZIP_CHECKSUM}}
      MAC_ZIP_CHECKSUM: ${{steps.mac_pre_release.outputs.ZIP_CHECKSUM}}
      WINDOWS_ZIP_CHECKSUM: ${{steps.windows_pre_release.outputs.ZIP_CHECKSUM}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    # CACHE SETUP
    - name: Cache cargo
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ matrix.config.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # BUILD
    - name: Build release
      if: matrix.config.kind == 'test_release'
      run: |
          cd executable
          cargo build --release --locked --all-targets --verbose
          cp ../main.py target/release/main.py

    # Release
    - name: Pre-release (Linux)
      id: linux_pre_release
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      run: |
          cd executable/target/release
          zip -r dprint-plugin-yapf-x86_64-unknown-linux-gnu.zip dprint-plugin-yapf main.py
          echo "::set-output name=ZIP_CHECKSUM::$(shasum -a 256 dprint-plugin-yapf-x86_64-unknown-linux-gnu.zip | awk '{print $1}')"
    - name: Pre-release (Mac)
      id: mac_pre_release
      if: startsWith(matrix.config.os, 'macOS') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      run: |
          cd executable/target/release
          zip -r dprint-plugin-yapf-x86_64-apple-darwin.zip dprint-plugin-yapf main.py
          echo "::set-output name=ZIP_CHECKSUM::$(shasum -a 256 dprint-plugin-yapf-x86_64-apple-darwin.zip | awk '{print $1}')"
    - name: Pre-release (Windows)
      id: windows_pre_release
      if: startsWith(matrix.config.os, 'windows') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      run: |
          cd executable/target/release
          Compress-Archive -CompressionLevel Optimal -Force -Path dprint-plugin-yapf.exe, main.py -DestinationPath dprint-plugin-yapf-x86_64-pc-windows-msvc.zip
          echo "::set-output name=ZIP_CHECKSUM::$(shasum -a 256 dprint-plugin-yapf-x86_64-pc-windows-msvc.zip | awk '{print $1}')"

    # UPLOAD ARTIFACTS
    - name: Upload Artifacts (Linux)
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      with:
        name: linux-artifacts
        path: executable/target/release/dprint-plugin-yapf-x86_64-unknown-linux-gnu.zip
    - name: Upload Artifacts (Mac)
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'macOS') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      with:
        name: mac-artifacts
        path: executable/target/release/dprint-plugin-yapf-x86_64-apple-darwin.zip
    - name: Upload Artifacts (Windows)
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'windows') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      with:
        name: windows-artifacts
        path: executable/target/release/dprint-plugin-yapf-x86_64-pc-windows-msvc.zip


  draft_release:
    name: draft_release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Download artifacts
      uses: actions/download-artifact@v2

    - name: Move downloaded artifacts
      run: |
        mv linux-artifacts/dprint-plugin-yapf-x86_64-unknown-linux-gnu.zip .
        mv mac-artifacts/dprint-plugin-yapf-x86_64-apple-darwin.zip .
        mv windows-artifacts/dprint-plugin-yapf-x86_64-pc-windows-msvc.zip .

    - name: Output checksums
      run: |
        echo "Linux zip: ${{needs.build.outputs.LINUX_ZIP_CHECKSUM}}"
        echo "Mac zip: ${{needs.build.outputs.MAC_ZIP_CHECKSUM}}"
        echo "Windows zip: ${{needs.build.outputs.WINDOWS_ZIP_CHECKSUM}}"

    - name: Create plugin file
      run: node scripts/createPluginFile.js

    - name: Get tag version
      id: get_tag_version
      run: echo ::set-output name=TAG_VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Get plugin file checksum
      id: get_plugin_file_checksum
      run: echo "::set-output name=CHECKSUM::$(shasum -a 256 yapf.exe-plugin | awk '{print $1}')"

    - name: Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          dprint-plugin-yapf-x86_64-apple-darwin.zip
          dprint-plugin-yapf-x86_64-unknown-linux-gnu.zip
          dprint-plugin-yapf-x86_64-pc-windows-msvc.zip
          yapf.exe-plugin
        body: |
          ## Install

          Dependencies:

          1. Install python and ensure it's on the path.
          2. Install dprint's CLI >= 0.9.0

          In *.dprintrc.json*:

          1. Specify the plugin url and checksum in the `"plugins"` array:

             ```jsonc
             {
               // etc...
               "plugins": [
                 "https://plugins.dprint.dev/yapf-${{ steps.get_tag_version.outputs.TAG_VERSION }}.exe-plugin@${{ steps.get_plugin_file_checksum.outputs.CHECKSUM }}"
               ]
             }
             ```
          2. Ensure the `py` extension is matched in an `"includes"` pattern.
          3. Add a `"yapf"` configuration property if desired.

             ```jsonc
             {
               // ...etc...
               "yapf": {
                 "based_on_style": "pep8",
                 "spaces_before_comment": 4
               }
             }
             ```
        draft: true
